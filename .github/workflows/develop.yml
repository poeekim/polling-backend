name: Develop Deploy

on:
  push:
    branches: ['develop']

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: polling
          MYSQL_USER: polling
          MYSQL_PASSWORD: polling
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: 리포지토리 체크아웃
        uses: actions/checkout@v2

      - name: JDK 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Wrapper에 실행 권한 추가
        run: chmod +x ./gradlew

      - name: Gradle 빌드
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: ./gradlew clean build --scan

      - name: 빌드 디렉토리 확인
        run: ls -la build/

      - name: 빌드 결과 확인
        run: ls -la build/libs/

      - name: 테스트 실행
        env:
           SPRING_PROFILES_ACTIVE: test
           SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/polling?serverTimezone=Asia/Seoul&useSSL=false&allowPublicKeyRetrieval=true
           SPRING_DATASOURCE_USERNAME: polling
           SPRING_DATASOURCE_PASSWORD: polling
        run: ./gradlew test --scan


  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: 리포지토리 체크아웃
        uses: actions/checkout@v2
        
      - name: JDK 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: AWS 인증하기
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      - name: 현재 작업 디렉토리 확인
        run: |
          echo "현재 작업 디렉토리:"
          pwd

      - name: Gradle Wrapper에 실행 권한 추가
        run: chmod +x ./gradlew

      - name: Gradle 빌드 (deploy job에서)
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }} # Sentry 인증 토큰 전달
        run: ./gradlew clean build --scan
        
      - name: 빌드 디렉토리 확인
        run: ls -la /home/runner/work/polling-backend/polling-backend/build/

      - name: 빌드 결과 확인
        run: ls -la /home/runner/work/polling-backend/polling-backend/build/libs/

      - name: JAR 파일 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.LIGHTSAIL_HOST_DEV }}
          username: ubuntu
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          source: '/home/runner/work/polling-backend/polling-backend/build/libs/polling-0.0.1-SNAPSHOT.jar'
          target: '/home/ubuntu/polling-backend'
          overwrite: true
          debug: true
          timeout: 300s
      

      - name: 실행 중인 jar 파일 종료
        uses: appleboy/ssh-action@v1.1.0
        with:
           host: ${{ secrets.LIGHTSAIL_HOST_DEV }}
           username: ubuntu
           key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
           debug: true
           timeout: 300s
           script: |
            if pgrep -f "java -jar /home/ubuntu/polling-backend/github/workspace/build/libs/polling-0.0.1-SNAPSHOT.jar"; then
              PKILL_EXIT_CODE=$?  # pkill의 종료 코드를 저장

              if [ $PKILL_EXIT_CODE -eq 0 ]; then
                echo "프로세스가 성공적으로 종료되었습니다."
              elif [ $PKILL_EXIT_CODE -eq 143 ]; then
                echo "프로세스가 정상적으로 종료되었습니다 (SIGTERM)."
              else
                echo "프로세스 종료 중 오류가 발생했습니다. 종료 코드: $PKILL_EXIT_CODE"
                exit 1  # 다른 오류가 발생한 경우에만 종료
              fi
              exit 0  # 정상 종료
            else
              echo "실행 중인 애플리케이션 프로세스가 없습니다."
              exit 0  # 애플리케이션이 실행 중이지 않은 경우도 정상 종료
            fi
